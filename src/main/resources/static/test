package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
package com.demo.shirodemo.rest;


import com.demo.shirodemo.entity.Result;
import com.demo.shirodemo.service.MerchantService;
import com.demo.shirodemo.service.RedisForTokenService;
import com.demo.shirodemo.tool.FileUtil;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import lombok.var;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ResourceUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

@RestController
@Slf4j
public class MerchandiseController {
    @Autowired
    private RedisForTokenService tokenService;
    @Autowired
    private MerchantService service;
    Result result;


    @PostMapping("/addMerchandiseByExcel")
    public Result addMerchandiseByExcel( MultipartFile file )throws Exception{
//        String fileName = file.getOriginalFilename();
//
//        String path = ResourceUtils.getURL("classpath:").getPath();
//        log.info("path:"+path);
//        File filePath = new File(path, "static/photo/softImages/");
//        FileUtil.uploadFile(file.getBytes(), filePath.toString() + "/", fileName);

        if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
            return new Result(false,"上传文件类型不允许，请先下载模板");
        log.info(file.getContentType());
        Workbook wb = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = wb.getSheetAt(0);
        List<String> list = new ArrayList<>();
        for (int i = 1; i <= sheet.getLastRowNum(); i++)
        {
            Row row = sheet.getRow(i);//获取索引为i的行，以0开始
            String name= row.getCell(0).getStringCellValue();//获取第i行的索引为0的单元格数据
            int age = (int)row.getCell(1).getNumericCellValue();
            list.add("age: "+age +" name:"+name);
            log.info("age: "+age +"    name:"+name);
        }
        try
        {
            wb.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return new Result(true,"上传成功",list);
    }

    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downloadExcelDemo")
    public void downloadExcelDemo (HttpServletResponse response) throws Exception {

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        String path = ResourceUtils.getURL("classpath:").getPath();
        File filePath = new File(path, "static/Excel/");
        String fileName = "MerchandiseDemo.xlsx";
        try {
            File file = new File(filePath.getPath() + '/', fileName);
            response.setContentType("application/octet-stream");
            response.setContentType("application/ force-download");
            response.setCharacterEncoding("UTF-8");
            response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
            response.addHeader("Content-Length", String.valueOf(file.length()));
            in = new BufferedInputStream(new FileInputStream(file));

            out = new BufferedOutputStream(response.getOutputStream());
            byte[] b = new byte[1024];
            int len = 0;
            while((len = in.read(b))!=-1){
                out.write(b, 0, len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
}


    @ApiOperation(value = "获取添加商品模板  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/downLoadFile")
    public void downLoadFile()
    {
//        var file = File.OpenRead("filePath");
//        return File(file.Content, "appliction/octet-stream", "you want file Name");//第二参数根据文件类型调整
    }








    @ApiOperation(value = "获取所有商品/软件  TODO redis缓存",notes = "only root can do this")
    @GetMapping("/getAllMerchant")
    @ApiImplicitParam(name = "token",value = "令牌",required = true,paramType = "query",dataType = "String")
    public Result getAllMerchant(
                                 @RequestParam("token")String token){
        Result result = tokenService.checkToken(token);
        if (result.getSuccess()) {
            result.setData(service.getAllInfo());
            result.setSuccess(true);
            result.setMsg("success");
        }
        return result;
    }



}
